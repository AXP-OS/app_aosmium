#####################################################################################
# documentation:
# - https://docs.gitea.com/usage/actions/overview
# - https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
#####################################################################################

name: Build WebView

on:
  push:
    branches:
      - ci
#    paths:
#      - 'prebuilt/*/webview-unsigned.apk'
#      - push-trigger.txt
  workflow_dispatch:  # button shown only when in default branch

# NOT implemented in Gitea!
#permissions:
#  contents: write # allow creating releases

jobs:
  build:
    runs-on: docker-node-latest

    steps:

    - name: Prep container
      shell: bash
      run: apt-get update && apt-get -y install git-lfs

    - uses: actions/checkout@v4
      with:
        submodules: true
        lfs: true
        path: webview

    - uses: actions/checkout@v4
      with:
        submodules: true
        lfs: true
        repository: ${{ vars.VANADIUM_REPO_URL }}
        path: vanadium

    - name: set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '18'
        distribution: 'temurin'

    - name: Setup Android SDK
      # https://github.com/android-actions/setup-android
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: 12266719
        packages: "build-tools;35.0.0"

    - name: "Build WebView32"
      shell: bash
      run: |
        cd webview
        ./build-webview.sh -V ../vanadium -a arm

    - name: "Build WebView64"
      shell: bash
      run: |
        cd webview
        ./build-webview.sh -V ../vanadium -a arm64

    - name: Store WebViews in LFS
      shell: bash
      run: |
        for arch in arm arm64;do
            WVURI="https://${{vars.LOCAL_ORG_DOMAIN}}:${{vars.LOCAL_ORG_PORT}}/api/v1/repos/${{ github.ref }}/contents/prebuilt%2F${arch}%2Fwebview-unsigned.apk"
            # check if exists
            SHA=$(curl -sX 'GET' \
              "$WVURI" \
              -H "Authorization: token ${{secrets.LOCAL_TOKEN_REPO_RW}}" \
              -H 'accept: application/json' \
              -H 'Content-Type: application/json' | jq -jr .sha || true)
            echo "sha? >$SHA<"
            if [ "${#SHA}" -eq 40 ];then
              PAYLOAD=$(jq -n --arg content "$(base64 prebuilt/$arch/webview-unsigned.apk)" --arg sha "$SHA" '{content: $content, sha: $sha}')
              # update if it exists
              RESP=$(curl -sX 'PUT' \
                "$WVURI" \
                -H "Authorization: token ${{secrets.LOCAL_TOKEN_REPO_RW}}" \
                -H 'accept: application/json' \
                -H 'Content-Type: application/json' \
                -d "$PAYLOAD")
              echo "RET1:$?"
            else
              # create if not exists
              RESP=$(curl -sX 'POST' \
                "$WVURI" \
                -H "Authorization: token ${{secrets.LOCAL_TOKEN_REPO_RW}}" \
                -H 'accept: application/json' \
                -H 'Content-Type: application/json' \
                -d "$PAYLOAD")
              echo "RET2:$?"
            fi
        done

